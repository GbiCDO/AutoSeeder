<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/Pz8OVFRUTE5OTkZUVFRTbW1tc09PT1Nubm5zUFBQVm5u
        bnRSUlI0AAAAA2lqaV1gYGBnYGFhZmFhYWFBQUEnU1NTR////wBRUVEibm9udk9PUElra2toampqWz4+
        PhZtbW1ibW1tY01NTSVubm5rWlpaR2doZ2VgYWBcGhoaBlNTUyCIiIi/h4eHxnp6ebuGhoXnYmNir4WF
        hLxkZGOAg4ODwUtLSy4uLi0Mh4aGumJiYn+IiIjQbW1sumBgYFV9fX2f////AHV1dFKDg4PAbW1tnaen
        p/2ioqLxd3d3p6ampvempqb5ampqnHN0c9l1dXW5ioqK2mlpaasMDAwKWFlYH5GRkb+Pj4/HhISEuZeX
        l/FsbGy4iYmJjnR0c1KFhYWV////AERERA6KiYmtVFRUOZycnMp6enrOd3d3kpqams1GRkYkfX18UYeH
        hpJ9fX1ksrKy+62tre18fHyZsLGw8rCxsfN4eXiNioqK4WVlZZmcnJzYeXp5twcHBwtEREQLXV1dO1hY
        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
        AH/+AAB//gAAf/4AAH/+CAB///////////8=
</value>
  </data>
</root>